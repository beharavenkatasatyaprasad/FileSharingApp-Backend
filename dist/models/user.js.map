{"version":3,"sources":["../../src/models/user.js"],"names":["saltRounds","User","app","model","name","email","password","created","Date","updated","findUserByEmail","bind","login","findById","id","cb","db","query","_id","ObjectID","collection","find","limit","toArray","err","result","user","_","get","error","message","callback","console","log","passwordCheck","bcrypt","compareSync","auth","Auth","createToken","token","obj","trim","toLower","errors","length","push","hashPassword","hashSync","validate","messages","each","join","insertOne"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash'\r\nimport bcrypt from 'bcryptjs'\r\nimport Auth from './auth'\r\nimport {ObjectID} from 'mongodb'\r\n\r\n\r\n\r\nconst saltRounds = 10;\r\n\r\nexport default class User{ \t\r\n\r\n\r\n\r\n\tconstructor(app){\r\n\r\n\t\tthis.app = app;\r\n\r\n\r\n\r\n\t\tthis.model = {\r\n\t\t\tname: null,\r\n\t\t\temail: null,\r\n\t\t\tpassword: null,\r\n\t\t\tcreated: new Date(),\r\n\t\t\tupdated: null,\r\n\t\t}\r\n\r\n\r\n\t\tthis.findUserByEmail = this.findUserByEmail.bind(this);\r\n\t\tthis.login = this.login.bind(this);\r\n\t\tthis.findById = this.findById.bind(this);\r\n\t}\r\n\r\n\r\n\tfindById(id = null, cb = () => {}){\r\n\r\n\r\n\t\tconst db = this.app.db;\r\n\r\n\t\tconst query = {\r\n\t\t\t_id: new ObjectID(id)\r\n\t\t}\r\n\t\t\r\n\t\tdb.collection('users').find(query).limit(1).toArray((err, result) => {\r\n\r\n\t\t\tconst user = _.get(result, '[0]');\r\n\t\t\tif(err === null && user){\r\n\r\n\t\t\t\tdelete user.password;\r\n\t\t\t\t\r\n\t\t\t\treturn cb(null, user);\r\n\t\t\t}\r\n\r\n\t\t\tconst error = {message: \"User not found.\"}\r\n\t\t\treturn cb(error, null);\r\n\t\t})\r\n\t}\r\n\tlogin(email, password, callback = () => {}){\r\n\r\n\t\tconst app = this.app;\r\n\r\n\t\tlet error = null;\r\n\t\tlet user = {name: \"A\", email: \"test@gmail.com\"};\r\n\r\n\t\tconsole.log(\"Email: \", email, \"password:\", password);\r\n\r\n\t\tif(!email || !password){\r\n\r\n\t\t\terror = {message: \"Email or password is required.\"};\r\n\t\t\treturn callback(error, null);\r\n\t\t}\r\n\r\n\t\tthis.findUserByEmail(email, (err, user) => {\r\n\r\n\r\n\t\t\tif(err === null && user){\r\n\r\n\t\t\t\r\n\r\n\t\t\t\tconst passwordCheck = bcrypt.compareSync(password, user.password); // false\r\n\r\n\t\t\t\r\n\r\n\t\t\t\tif(passwordCheck){\r\n\r\n\t\t\t\t\t// create new token and return this token key for user and use it for later request.\r\n\t\t\t\t\tconst auth = new Auth(app);\r\n\r\n\r\n\t\t\t\t\tauth.createToken(user, null, (err, token) => {\r\n\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t\t\t\tif(err){\r\n\r\n\t\t\t\t\t\t\terror = {message: \"An error login your account\"};\r\n\t\t\t\t\t\t\treturn (error, null);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdelete user.password;\r\n\t\t\t\t\t\ttoken.user = user;\r\n\t\t\t\t\t\treturn callback(null, token);\r\n\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t}else{\r\n\r\n\t\t\t\t\terror = {message: \"Password does not match.\"};\r\n\r\n\t\t\t\t\treturn callback(error, null);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t}\r\n\t\t\tif(err || !user){\r\n\t\t\t\terror = {message: \"An error login your account\"};\r\n\r\n\t\t\t\treturn callback(error, null);\r\n\t\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\t\t});\r\n\r\n\t\t\r\n\t}\r\n\r\n\tinitWithObject(obj){\r\n\r\n\t\tthis.model.name = _.trim(_.get(obj, 'name', null));\r\n\t\tthis.model.email = _.toLower(_.trim(_.get(obj, 'email', null)));\r\n\t\tthis.model.password = _.get(obj, 'password', null);\r\n\r\n\r\n\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tvalidate(cb = () => {}){\r\n\r\n\r\n\t\tlet errors = [];\r\n\r\n\r\n\t\tconst model = this.model;\r\n\t\tconst db = this.app.db;\r\n\r\n\r\n\t\tif(model.password.length < 3 ){\r\n\r\n\t\t\terrors.push({\r\n\t\t\t\tmessage: \"Password should more than 3 characters.\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\t\tthis.findUserByEmail(model.email, (err, user) => {\r\n\r\n\r\n\t\t\tif(err || user){\r\n\r\n\t\t\t\terrors.push({message: \"Email already exists.\"});\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn cb(errors);\r\n\t\t});\r\n\r\n\r\n\r\n\t}\r\n\r\n\tfindUserByEmail(email = null, callback = () => {}){\r\n\t\tconst db = this.app.db;\r\n\r\n\t\tconst query = {\r\n\t\t\temail: email\r\n\t\t};\r\n\r\n\t\tdb.collection('users').find(query).limit(1).toArray((err, result) => {\r\n\t\t\treturn callback(err, _.get(result, '[0]', null));\r\n\t\t}); \r\n\r\n\r\n\t}\r\n\tcreate(cb){\r\n\r\n\t\tlet model = this.model;\r\n\t\tconst db = this.app.db;\r\n\r\n\t\tconst hashPassword = bcrypt.hashSync(model.password, saltRounds);\r\n\t\tmodel.password = hashPassword;\r\n\t\t\r\n\t\tthis.validate((errors) => {\r\n\r\n\r\n\r\n\t\t\tlet messages = [];\r\n\r\n\t\t\tif(errors.length > 0){\r\n\r\n\t\t\t\t_.each(errors, (err) => {\r\n\r\n\t\t\t\t\tmessages.push(err.message);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn cb(_.join(messages, ','), null);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdb.collection('users').insertOne(model, (err, result) => {\r\n\t\t\t\t\treturn cb(err, model);\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\r\n\t\t\r\n\r\n\t}\r\n\r\n}"]}