{"version":3,"sources":["../src/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","next","status","json","version","post","array","files","_","fileModels","each","fileObject","newFile","File","initWithObject","toJSON","push","length","collection","insertMany","err","result","error","message","Post","from","to","insertedIds","insertOne","sendEmail","Email","sendDownloadLink","info","fileId","params","id","find","_id","toArray","fileName","file","downloader","S3","downloadUrl","getDownloadUrl","redirect","postId","console","log","getPostById","archiver","FileArchiver","download","body","user","User","create","newUser","email","password","login","token","auth","Auth","checkAuth","isLoggedIn","userId","findById","obj","callback","postObjectId","ObjectID","limit","results","Error","fileIds","$in","Object","values"],"mappings":"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","file":"router.js","sourcesContent":["import path from 'path'\r\nimport {version} from '../package.json'\r\nimport _ from 'lodash'\r\nimport File from './models/file'\r\nimport Post from './models/post'\r\nimport {ObjectID} from 'mongodb'\r\nimport FileArchiver from './archiver'\r\nimport Email from './email'\r\nimport S3 from './s3'\r\nimport User from './models/user'\r\nimport Auth from './models/auth'\r\n\r\nclass AppRouter {\r\n\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.setupRouters();\r\n    }\r\n\r\n\r\n    setupRouters() {\r\n\r\n        const app = this.app;\r\n        const db = app.get('db');\r\n        const uploadDir = app.get('storageDir');\r\n        const upload = app.upload;\r\n\r\n        // root routing.\r\n        app.get('/', (req, res, next) => {\r\n\r\n            return res.status(200).json({\r\n                version: version\r\n            });\r\n\r\n        });\r\n\r\n        // Upload routing\r\n        app.post('/api/upload', upload.array('files'), (req, res, next) => {\r\n            const files = _.get(req, 'files', []);\r\n\r\n\r\n            let fileModels = [];\r\n\r\n\r\n            _.each(files, (fileObject) => {\r\n                const newFile = new File(app).initWithObject(fileObject).toJSON();\r\n                fileModels.push(newFile);\r\n            });\r\n\r\n\r\n            if (fileModels.length) {\r\n\r\n                db.collection('files').insertMany(fileModels, (err, result) => {\r\n                    if (err) {\r\n\r\n                        return res.status(503).json({\r\n                            error: {\r\n                                message: \"Unable saved your files.\",\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    let post = new Post(app).initWithObject({\r\n\r\n                        from: _.get(req, 'body.from'),\r\n                        to: _.get(req, 'body.to'),\r\n                        message: _.get(req, 'body.message'),\r\n                        files: result.insertedIds,\r\n                    }).toJSON();\r\n\r\n\r\n                    // let save post object to posts collection.\r\n\r\n                    db.collection('posts').insertOne(post, (err, result) => {\r\n\r\n\r\n                        if (err) {\r\n                            return res.status(503).json({error: {message: \"Your upload could not be saved.\"}});\r\n                        }\r\n\r\n                        //implement email sending to user with download link.\r\n\r\n                        // send email\r\n                        const sendEmail = new Email(app).sendDownloadLink(post, (err, info) => {\r\n\r\n\r\n                        });\r\n\r\n\r\n                        // callback to react app with post detail.\r\n                        return res.json(post);\r\n\r\n                    });\r\n\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                return res.status(503).json({\r\n                    error: {message: \"Files upload is required.\"}\r\n                });\r\n            }\r\n        });\r\n\r\n        // Download routing\r\n\r\n        app.get('/api/download/:id', (req, res, next) => {\r\n\r\n            const fileId = req.params.id;\r\n            db.collection('files').find({_id: ObjectID(fileId)}).toArray((err, result) => {\r\n\r\n                const fileName = _.get(result, '[0].name');\r\n                if (err || !fileName) {\r\n\r\n                    return res.status(404).json({\r\n                        error: {\r\n                            message: \"File not found.\"\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n                // Download file from S3 service\r\n                const file = _.get(result, '[0]');\r\n                const downloader = new S3(app, res);\r\n\r\n\r\n                // return downloader.download(file); Proxy download from s3 service\r\n\r\n                // Download Directly from S3\r\n\r\n\r\n                const downloadUrl = downloader.getDownloadUrl(file);\r\n\r\n                return res.redirect(downloadUrl);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                /*const filePath = path.join(uploadDir, fileName);\r\n\r\n                return res.download(filePath, _.get(result, '[0].originalName'), (err) => {\r\n\r\n                    if (err) {\r\n\r\n                        return res.status(404).json({\r\n\r\n                            error: {\r\n                                message: \"File not found\"\r\n                            }\r\n                        });\r\n                    } else {\r\n\r\n                        console.log(\"File is downloaded.\");\r\n\r\n                    }\r\n\r\n                });*/\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        // routing for post detail /api/posts/:id\r\n\r\n        app.get('/api/posts/:id', (req, res, next) => {\r\n\r\n            const postId = _.get(req, 'params.id');\r\n            console.log(postId)\r\n\r\n            this.getPostById(postId, (err, result) => {\r\n\r\n                if (err) {\r\n                console.log(err)\r\n\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                return res.json(result);\r\n            })\r\n\r\n\r\n        });\r\n\r\n        // Routing download zip files.\r\n        app.get('/api/posts/:id/download', (req, res, next) => {\r\n\r\n            const id = _.get(req, 'params.id', null);\r\n\r\n\r\n            this.getPostById(id, (err, result) => {\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                const files = _.get(result, 'files', []);\r\n                const archiver = new FileArchiver(app, files, res).download();\r\n                return archiver;\r\n\r\n            })\r\n        });\r\n\r\n\r\n        // Create new users post\r\n\r\n        app.post('/api/users', (req, res, next) => {\r\n\r\n        \r\n\r\n            const body = _.get(req, 'body');\r\n\r\n            console.log(\"Data from fontend posted: \", body);\r\n\r\n            const user = new User(app);\r\n            user.initWithObject(body).create((err, newUser) => {\r\n\r\n\r\n                console.log(\"New user created with error & callback\", err, newUser);\r\n\r\n\r\n                if(err){\r\n                    return res.status(503).json({\r\n                        error: {message: err}\r\n                    });\r\n                }\r\n                return res.status(200).json(newUser);\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n        // Login user \r\n\r\n        app.post('/api/users/login', (req, res, next) => {\r\n\r\n            const body = _.get(req, 'body', {});\r\n\r\n            const user = new User(app);\r\n\r\n            const email = _.get(body, 'email');\r\n            const password = _.get(body, 'password');\r\n\r\n\r\n            user.login(email, password, (err, token) => {\r\n\r\n                    if(err){\r\n\r\n                        return res.status(401).json({\r\n                            message: \"An error login your account. Please try again!\"\r\n                        });\r\n                    }\r\n\r\n                    return res.status(200).json(token);\r\n            });\r\n\r\n\r\n            \r\n\r\n        });\r\n\r\n        // get my profile detail\r\n        app.get('/api/users/:id', (req, res, next) => {\r\n\r\n\r\n\r\n            const auth = new Auth(app);\r\n\r\n            auth.checkAuth(req, (isLoggedIn) => {\r\n\r\n\r\n                if(!isLoggedIn){\r\n\r\n                    return res.status(401).json({\r\n                        message: \"Unauthorized\"\r\n                    });\r\n                }\r\n\r\n\r\n                const userId = _.get(req, 'params.id', null);\r\n\r\n                const user = new User(app).findById(userId, (err, obj) => {\r\n\r\n\r\n                        if(err){\r\n\r\n                            return res.status(404).json({\r\n                                message: \"User not found.\"\r\n                            });\r\n                        }\r\n\r\n                        return res.status(200).json(obj);\r\n\r\n                 });\r\n\r\n\r\n\r\n            });\r\n\r\n            \r\n\r\n\r\n\r\n            \r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getPostById(id, callback = () => {\r\n    }) {\r\n\r\n\r\n        const app = this.app;\r\n\r\n        const db = app.get('db');\r\n\r\n\r\n        let postObjectId = null;\r\n        try {\r\n            postObjectId = new ObjectID(id);\r\n        }\r\n        catch (err) {\r\n\r\n            return callback(err, null);\r\n\r\n        }\r\n\r\n        db.collection('posts').find({_id: postObjectId}).limit(1).toArray((err, results) => {\r\n            let result = _.get(results, '[0]');\r\n\r\n            if (err || !result) {\r\n                return callback(err ? err : new Error(\"File not found.\"));\r\n            }\r\n\r\n            let fileIds = _.get(result, 'files', []);\r\n\r\n            db.collection('files').find({_id: {$in: Object.values(fileIds)}}).toArray((err, files) => {\r\n\r\n                if (err || !files || !files.length) {\r\n                    return callback(err ? err : new Error(\"File not found.\"));\r\n                }\r\n\r\n                result.files = files;\r\n\r\n\r\n                return callback(null, result);\r\n\r\n            });\r\n\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AppRouter;"]}