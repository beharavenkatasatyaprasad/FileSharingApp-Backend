{"version":3,"sources":["../src/index.js"],"names":["url","connect","callback","MongoClient","useNewUrlParser","useUnifiedTopology","err","client","AWS","config","update","s3Config","region","s3Region","s3","S3","email","nodemailer","createTransport","smtp","storageDir","path","join","__dirname","upload","storage","bucket","s3Bucket","metadata","req","file","cb","fieldName","fieldname","key","filename","Date","now","toString","originalname","PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","set","console","log","db","AppRouter","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;AACA;;;;AACA;;AAEA;;AAoBA;;;;AACA;;;;;;AA1BA;AAUA,IAAMA,MAAM,oHAAZ;;AAGA,IAAMC,UAAU,SAAVA,OAAU,CAACC,QAAD,EAAc;;AAE1BC,yBAAYF,OAAZ,CAAoBD,GAApB,EAAyB;AACrBI,yBAAiB,IADI;AAErBC,4BAAoB;AAFC,KAAzB,EAGG,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAChB,eAAOL,SAASI,GAAT,EAAcC,MAAd,CAAP;AACH,KALD;AAOH,CATD;;AAWA;;;AAKAC,iBAAIC,MAAJ,CAAWC,MAAX,CAAkBC,gBAAlB;;AAEAH,iBAAIC,MAAJ,CAAWG,MAAX,GAAoBC,gBAApB;;AAEA,IAAMC,KAAK,IAAIN,iBAAIO,EAAR,EAAX;;AAIA;;AAEA,IAAIC,QAAQC,qBAAWC,eAAX,CAA2BC,YAA3B,CAAZ;;AAGA;;AAEA,IAAMC,aAAaC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,SAA3B,CAAnB;;AAGA;;AAEA,IAAMC,SAAS,sBAAO;AAClBC,aAAS,uBAAS;AACdX,YAAIA,EADU;AAEdY,gBAAQC,gBAFM;AAGdC,kBAAU,kBAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC/BA,eAAG,IAAH,EAAS,EAACC,WAAWF,KAAKG,SAAjB,EAAT;AACH,SALa;AAMdC,aAAK,aAAUL,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC1B,gBAAMI,WAAcC,KAAKC,GAAL,GAAWC,QAAX,EAAd,SAAuCR,KAAKS,YAAlD;AACAR,eAAG,IAAH,EAASI,QAAT;AACH;AATa,KAAT;AADS,CAAP,CAAf;;AAgBA;;AAEA,IAAMK,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAGAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAJ,IAAII,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;;AAIAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;;AAKAR,IAAIS,GAAJ,CAAQ,MAAR,EAAgB3B,SAAhB;AACAkB,IAAIS,GAAJ,CAAQ,YAAR,EAAsB9B,UAAtB;AACAqB,IAAIjB,MAAJ,GAAaA,MAAb;AACAiB,IAAIzB,KAAJ,GAAYA,KAAZ;AACAyB,IAAI3B,EAAJ,GAASA,EAAT;;AAEA;;AAEAb,QAAQ,UAACK,GAAD,EAAMC,MAAN,EAAiB;;AAErB,QAAGD,GAAH,EAAO;AACH6C,gBAAQC,GAAR,CAAY,qCAAZ,EAAmD9C,GAAnD;AACA,cAAOA,GAAP;AACH;;AAED,QAAI+C,KAAK9C,OAAO8C,EAAP,CAAU,KAAV,CAAT;AACAZ,QAAIY,EAAJ,GAAS9C,OAAO8C,EAAP,CAAU,KAAV,CAAT;AACAZ,QAAIS,GAAJ,CAAQ,IAAR,EAAcG,EAAd;;AAGA;AACA,QAAIC,gBAAJ,CAAcb,GAAd;;AAGAA,QAAIC,MAAJ,CAAWa,MAAX,CAAkBC,QAAQC,GAAR,CAAYjB,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC9CW,gBAAQC,GAAR,6BAAsCX,IAAIC,MAAJ,CAAWgB,OAAX,GAAqBC,IAA3D;AACH,KAFD;AAIH,CApBD;;kBAwBelB,G","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport multer from 'multer'\r\nimport path from 'path';\r\n\r\n\r\n// import {connect} from \"./database\";\r\nimport AppRouter from './router'\r\nimport nodemailer from 'nodemailer'\r\nimport {smtp, s3Config, s3Region,s3Bucket} from './config'\r\n\r\nimport {\r\n    MongoClient\r\n} from 'mongodb'\r\n\r\n\r\nconst url = 'mongodb+srv://satyaprasadbehara:RB9dY2QVDX8nDqHz@cluster0.mdyvh.mongodb.net/filesystem?retryWrites=true&w=majority';\r\n\r\n\r\nconst connect = (callback) => {\r\n\r\n    MongoClient.connect(url, {\r\n        useNewUrlParser: true,\r\n        useUnifiedTopology: true\r\n    }, (err, client) => {\r\n        return callback(err, client);\r\n    });\r\n\r\n};\r\n\r\n// Amazon S3 Setup\r\nimport AWS from 'aws-sdk'\r\nimport multerS3 from 'multer-s3'\r\n\r\n\r\nAWS.config.update(s3Config);\r\n\r\nAWS.config.region = s3Region ;\r\n\r\nconst s3 = new AWS.S3();\r\n\r\n\r\n\r\n// Setup Email\r\n\r\nlet email = nodemailer.createTransport(smtp);\r\n\r\n\r\n// File storage config\r\n\r\nconst storageDir = path.join(__dirname, '..', 'storage');\r\n\r\n\r\n//const upload = multer({ storage: storageConfig }); // local upload.\r\n\r\nconst upload = multer({\r\n    storage: multerS3({\r\n        s3: s3,\r\n        bucket: s3Bucket,\r\n        metadata: function (req, file, cb) {\r\n            cb(null, {fieldName: file.fieldname});\r\n        },\r\n        key: function (req, file, cb) {\r\n            const filename = `${Date.now().toString()}-${file.originalname}`;\r\n            cb(null, filename)\r\n        }\r\n    })\r\n})\r\n\r\n\r\n\r\n// End file storage config\r\n\r\nconst PORT = 3000;\r\nconst app = express();\r\napp.server = http.createServer(app);\r\n\r\n\r\napp.use(morgan('dev'));\r\n\r\n\r\napp.use(cors({\r\n    exposedHeaders: \"*\"\r\n}));\r\n\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}));\r\n\r\n\r\napp.set('root', __dirname);\r\napp.set('storageDir', storageDir);\r\napp.upload = upload;\r\napp.email = email;\r\napp.s3 = s3;\r\n\r\n//Connect to the database.\r\n\r\nconnect((err, client) => {\r\n\r\n    if(err){\r\n        console.log(\"An error connecting to the database\", err);\r\n        throw (err);\r\n    }\r\n\r\n    let db = client.db('app');\r\n    app.db = client.db('app');\r\n    app.set('db', db);\r\n\r\n\r\n    // init routers.\r\n    new AppRouter(app);\r\n\r\n\r\n    app.server.listen(process.env.PORT || PORT, () => {\r\n        console.log(`App is running on port ${app.server.address().port}`);\r\n    });\r\n\r\n});\r\n\r\n\r\n\r\nexport default app;"]}